(import "functional.ark")
(import "list.ark")
(import "String.ark")
(let vowels "aeiou")

(let word "beat")

(let isVowel (fun  (char) {
    (> (str:find vowels char) -1)
}))

(let negate (fun (a) (not a)))

(let isConsonant (compose negate isVowel) )

(let startsWithVowel (isVowel (@ word 0)))

(let implode (fun (wordList) {
    (str:join wordList "")
}))

# keep taking until we get to a vowel
# list:takeWhile to come in ArkScript 3.2.0
(let firstPart (list:takeWhile word isConsonant))
(let lastPart (list:dropWhile word isConsonant))

(let result (implode (list:map [lastPart firstPart] implode)))

# end word depending on 
# add "yay" if word started with a vowel
(if startsWithVowel 
    (print result "yay")
    (print result "ay")
)
